class CfgSkeletons
{
	class Default;
	class Vehicle: Default
    {
		skeletonInherit="Default";
		sections[]={};
		sectionsInherit= "";
		skeletonBones[]=
		{
		};
	};		
	class Helicopter: Vehicle
	{
		skeletonInherit="";
		skeletonBones[]=
		{
			"velka vrtule dive","",
			"mala vrtule dive","",
			"velka vrtule","velka vrtule dive",
			"mala vrtule","mala vrtule dive",
			"damageHide","",
			"kompas","",
			"kompas01","",
			"kompasvalec","",
			"horizont","",
			"horizont_b","",
			"horizont01","",
			"horizont01_b","",
			"rucicka_01","",
			"rucicka_01a","",
			"rucicka_02","",
			"rucicka_02a","",
			"rucicka_03","",
			"rucicka_03a","",
			"rucicka_04","",
			"rucicka_04a","",
			"rucicka_05","",
			"rucicka_05a","",
			"rucicka_06","",
			"rucicka_06a","",
			"rucicka_07","",
			"rucicka_07a","",
			"display_off","",
			"wheel_front","",
			"wheel_left","",
			"wheel_right","",

		    "copip12","",
		    "radar",""			
		};
	};
    class AH_BAF: Helicopter
    {
/*		sectionsInherit="Helicopter";
		sections[]=
		{
			"muzzleflash",
			"trup",
			"elektronika",
			"glass1",
			"glass2",
			"glass3",
			"glass4",
			"glass5",

		    "camo1",
		    "camo2",
		    "camo3",
		    "stick",
			
			"velka vrtule dive","",
			"mala vrtule dive","",
			"velka vrtule","velka vrtule dive",
			"mala vrtule","mala vrtule dive",
			
		    "copip12","",
		    "radar",""			

		};*/
        isDiscrete=0;
		skeletonInherit="Helicopter";
        skeletonBones[] =
          {
            "main_trav","",
            "main_elev","main_trav",

            "tads_trav","",
            "tads_elev","tads_trav",
            "pnvs_trav","",

            "damper_left","",
            "damper_right","",
            "damper_rear","",

            "elevator","",
			"stick","",

	        "display_off","",
            "ins_ai_1","",
            "ins_ai_2","",
            "ins_asi_1","",
            "ins_alt_1","",
            "ins_alt_2","",
            "ins_compass_1","",
	        "dg_bank","",
	        "dg_compas","",
	        "dg_pitch","",
	        "dg_rpm","",
	        "dg_vertspeed","",
	        "velka vrtule","",
			"mala vrtule",""		
        };
    };	
};

class Rotation;
class CfgModels
{
	class Default;
	class Vehicle: Default
    {
		skeletonInherit="default";
		sections[]={};
		sectionsInherit= "";
		skeletonBones[]=
		{
		};
	};	
	class Helicopter: Vehicle
	{

		htMin = 60;		// Minimum half-cooling time (in seconds)
		htMax = 1800;	// Maximum half-cooling time (in seconds)
		afMax = 200;	// Maximum temperature in case the model is alive (in celsius)
		mfMax = 100;	// Maximum temperature when the model is moving (in celsius)
		mFact = 0;		// Metabolism factor - number from interval <0, 1> (0 - metabolism has no influence, 1 - metabolism has full influence (no other temperature source will be considered)).
		tBody = 0;	 	// Metabolism temperature of the model (in celsius)

		sectionsInherit="Vehicle";
		sections[]=
		{
			"sklo predni p",
			"sklo predni l",
			"velka vrtule staticka",
			"velka vrtule blur",
			"mala vrtule staticka",
			"mala vrtule blur",
			"zasleh",
			"motor",
			"elektronika",
			"munice",
			"zbran",
			"vez",
			"trup",
			"clan",
			"clan_sign",
			"glass1",
			"glass2",
			"glass3",
			"glass4",
			"glass5",
			"glass6",
			"glass7",
			"glass8",
			"glass9",
			"glass10",
			"glass11",
			"glass12",
			"glass13",
			"glass14",
			"glass15",
			"glass16",
			"glass17",
			"glass18",
			"glass19",
			"glass20",
			"podsvit pristroju",
			"wheel_front",
			"wheel_left",
			"wheel_right",
			"zbytek",
			
		    "camo1",
		    "camo2",
		    "camo3",
		    "stick",
		    "podsvit pristroju",
		    "zasleh",

            "copip12","",
		    "radar",""			
		};
		skeletonName="Helicopter";
		class Animations
		{
			// destruct BASE START
			// rotor static dive
			// rotordive
			// rotorShaft
			// velka vrtule
			// mala vrtule
			class Rotor_destructX
			{
				type="rotationX";
				source="damage";//damage
				selection="velka vrtule";
				axis="velka osa";
				animPeriod=0;
				minValue=0.99;
				maxValue=1;
				angle0=0;
				angle1="rad -20";
			};
			
			class Rotor_destructY:Rotor_destructX
			{
				type="rotationY";
				angle0="";
				angle1="rad +40";
			};
			
			class rotordive_destructX:Rotor_destructX
			{
				selection="rotordive";
				angle0="";
				angle1="rad -5";
			};
			class rotordive_destructY:rotordive_destructX
			{
				type="rotationY";
				angle0="";
				angle1="rad -15";
			};
			class rotordive_destructZ:rotordive_destructX
			{
				type="rotationZ";
				angle0="";
				angle1="rad -5";
			};
			class rotor_static_dive_destructX:Rotor_destructX
			{
				selection="rotor static dive";
				angle0="";
				angle1="rad 5";
			};
			class rotor_static_dive_destructY:rotor_static_dive_destructX
			{
				type="rotationY";
				angle0="";
				angle1="rad -15";
			};
			class rotor_static_dive_destructZ:rotor_static_dive_destructX
			{
				type="rotationZ";
				angle0="";
				angle1="rad -5";
			};
			class mala_vrtule_destructY:Rotor_destructX
			{
				type="rotationY";
				axis="mala osa";
				selection="mala vrtule";
				angle0="";
				angle1="rad 10";
			};
			class mala_vrtule_destructZ:mala_vrtule_destructY
			{
				type="rotationZ";
				angle0="";
				angle1="rad 25";
			};
			// destruct BASE END
			class damageHide
			{
				type="hide";
				source="damage";
				selection="damageHide";
			};
			
			// Rotors
			class HRotor: Rotation
			{
				source="rotorH";
				type="rotation";
				selection="velka vrtule";
				axis="velka osa";
				angle0="";
				angle1="2 * 3.1415926536";
			};
			class VRotor: Rotation
			{
				source="rotorV";
				type="rotation";
				selection="mala vrtule";
				axis="mala osa";
				angle0="";
				angle1="2 * 3.1415926536";
			};

			
			class IndicatorAltBaro: Rotation
			{
				source="altBaro";
				type="rotation";
				sourceAddress="loop";
				selection="alt";
				axis="osa_alt";
				memory=0;
				maxValue=304;
				angle0="";
				angle1="rad -360";
			};
			class IndicatorAltBaro2: IndicatorAltBaro
			{
				type="rotation";
				selection="alt2";
				axis="osa_alt2";
			};
			class IndicatorAltRadar: Rotation
			{
				type="rotation";
				source="altRadar";
				selection="nm_alt";
				axis="osa_nm_alt";
				memory="false";
				maxValue=61;
				angle0="";
				angle1="rad -180";
			};
			class IndicatorAltRadar2: IndicatorAltRadar
			{
				type="rotation";
				selection="nm_alt2";
				axis="osa_nm_alt2";
			};
			class IndicatorSpeed: Rotation
			{
				type="rotation";
				source="speed";
				selection="mph";
				axis="osa_mph";
				memory="false";
				maxValue=125;
				angle0="";
				angle1="rad -320";
			};
			class IndicatorSpeed2: IndicatorSpeed
			{
				type="rotation";
				selection="mph2";
				axis="osa_mph2";
			};
			class IndicatorVertSpeed: Rotation
			{
				type="rotation";
				source="vertSpeed";
				selection="vert_speed";
				axis="osa_vert_speed";
				minValue=-30;
				maxValue=30;
				angle0="";
				angle1="rad -300";
			};
			class IndicatorVertSpeed2: IndicatorVertSpeed
			{
				type="rotation";
				selection="vert_speed2";
				axis="osa_vert_speed2";
			};
			class IndicatorRPM: Rotation
			{
				type="rotation";
				source="rpm";
				selection="rpm";
				axis="osa_rpm";
				memory="false";
				maxValue=12;
				angle0="";
				angle1="rad -320";
			};
			class IndicatorRPM2: IndicatorRPM
			{
				type="rotation";
				selection="rpm2";
				axis="osa_rpm2";
			};
			class IndicatorCompass: Rotation
			{
				type="rotation";
				source="direction";
				selection="kompas";
				axis="osa_kompas";
				memory="false";
				minValue=-3.141593;
				maxValue=3.141593;
				angle0="";
				angle1="rad -360";
			};
			class IndicatorCompass2: IndicatorCompass
			{
				type="rotation";
				selection="kompas2";
				axis="osa_kompas2";
			};
			class WatchHour: Rotation
			{
				type="rotation";
				source="clockHour";
				selection="hodinova";
				axis="osa_time";
				memory="false";
				angle0="";
				angle1="rad -360";
			};
			class WatchHour2: WatchHour
			{
				type="rotation";
				selection="hodinova2";
				axis="osa_time2";
			};
			class WatchMinute: Rotation
			{
				type="rotation";
				source="clockMinute";
				selection="minutova";
				axis="osa_time";
				memory="false";
				angle0="";
				angle1="rad -360";
			};
			class WatchMinute2: WatchMinute
			{
				type="rotation";
				selection="minutova2";
				axis="osa_time2";
			};
			class HorizonBank
			{
				type="rotationZ";
				source="horizonBank";
				selection="horizont";
				axis="osa_horizont";
				memory="false";
				minValue="rad -360";
				maxValue="rad +360";
				angle0="rad -360";
				angle1="rad +360";
			};
			class HorizonDive
			{
				type="rotationX";
				source="horizonDive";
				selection="horizont";
				axis="osa_horizont";
				memory=0;
				minValue=-6.283190;
				maxValue=6.283190;
				angle0=-6.283190;
				angle1=6.283190;
			};
			class Horizon2Bank: HorizonBank
			{
				selection="horizont2";
				axis="osa_horizont2";
			};
			class Horizon2Dive: HorizonDive
			{
				selection="horizont2";
				axis="osa_horizont2";
			};
		};
	};
	class AH_BAF: Helicopter
    {
        sectionsInherit="Helicopter";
        sections[]=
		{
		  "camo1",
		  "camo2",
		  "camo3",
		  "stick",
		  "clan",
		  "clan_sign",
		  "velka vrtule staticka",
		  "velka vrtule Blur",
		  "mala vrtule staticka",
		  "mala vrtule blur",
		  "podsvit pristroju",
		  "zasleh",
		  
		  "L svetlo","",	  
		  "copip1",""
		};

        skeletonName = "AH_BAF";
        class Animations : Animations
        {
			class Stick_Pilot_Bank
			{
				type="rotation";
				source="cyclicAside";
				memory = 1;
				animPeriod = 0;
				sourceAddress="clamp";
				selection="stick";
				axis="stick_pilot2_axis";
				minValue = -0.1;
				maxValue = 0.1;
				angle0 = 0.1;
				angle1 = -0.1;
			};
			class copip12
			{
				type="hide";
				source="Hide_MFD_Pilot";
				selection="copip12";
				maxValue=1;
				minValue=0;
				hideValue=0;
				unhideValue=1;
			};	
			class radar
			{
				type="hide";
				source="Hide_Radar";
				selection="radar";
				maxValue=1;
				minValue=0;
				hideValue=0;
				unhideValue=1;
			};				
			class Stick_Pilot_Dive
			{
				type="rotation";
				source="cyclicForward";
				memory = 1;
				animPeriod = 0;
				sourceAddress="clamp";
				selection="stick";
				axis="stick_pilot_axis";
				minValue = -0.1;
				maxValue = 0.1;
				angle0 = -0.1;
				angle1 = 0.1;
			};
			class HRotor: Rotation
			{
				source = "rotorH";
				type="rotation";
				selection = "velka vrtule";
				axis = "velka osa";
				memory = 1;
				sourceAddress = "loop";
				minValue = 0;
				maxValue = 1;
				angle0 = 0;
				angle1 = "rad +360";

			};
			class VRotor: Rotation
			{
				source = "rotorV";
				type="rotation";
				selection = "mala vrtule";
				axis = "mala osa";
				memory = 1;
				sourceAddress = "loop";
				minValue = 0;
				maxValue = 1;
				angle0 = 0;
				angle1 = "rad -360";			
			};
                class MainTurret
                {
                    type           = "rotation";
                    source         = "mainTurret";
                    selection      = "main_trav";
                    axis           = "main_trav_axis";
                    animPeriod     = 0;
                    memory         = 1;
                    minValue       = "rad -360";
                    maxValue       = "rad +360";
                    angle0         = "rad -360";
                    angle1         = "rad +360";
                };
                class MainGun
                {
                    type           = "rotation";
                    source         = "mainGun";
                    selection      = "main_elev";
                    axis           = "main_elev_axis";
                    animPeriod     = 0;
                    memory         = 1;
                    minValue       = "rad -360";
                    maxValue       = "rad +360";
                    angle0         = "rad -360";
                    angle1         = "rad +360";
                };
                class TADSTurret
                {
                    type           = "rotation";
                    source         = "mainTurret";
                    selection      = "tads_trav";
                    axis           = "tads_trav_axis";
                    animPeriod     = 0;
                    memory         = 1;
                    minValue       = "rad -360";
                    maxValue       = "rad +360";
                    angle0         = "rad -360";
                    angle1         = "rad +360";
                };
                class TADSElev
                {
                    type           = "rotation";
                    source         = "mainGun";
                    selection      = "tads_elev";
                    axis           = "tads_elev_axis";
                    animPeriod     = 0;
                    memory         = 1;
                    minValue       = "rad -360";
                    maxValue       = "rad +360";
                    angle0         = "rad -360";
                    angle1         = "rad +360";
                };
                class PNVSTurret
                {
                    type           = "rotation";
                    source         = "mainTurret";
                    selection      = "pnvs_trav";
                    axis           = "pnvs_trav_axis";
                    animPeriod     = 0;
                    memory         = 1;
                    minValue       = "rad -360";
                    maxValue       = "rad +360";
                    angle0         = "rad -360";
                    angle1         = "rad +360";
                };
                class ArtificialHorizon_1_Pitch
                {
                    type           = "rotationX";
                    source         = "horizondive";
                    selection      = "ins_ai_1";
                    axis           = "ins_ai_1_pitch_axis";
                    minValue       = "rad -45";
                    maxValue       = "rad 45";
                    angle0         = "rad -45";
                    angle1         = "rad 45";
                };
                class ArtificialHorizon_1_Roll
                {
                    type           = "rotation";
                    source         = "horizonBank";
                    selection      = "ins_ai_1";
                    axis           = "ins_ai_1_roll_axis";
                    minValue       = "rad -360";
                    maxValue       = "rad 360";
                    angle0         = "rad -360";
                    angle1         = "rad 360";
                };
                class AirSpeedIndicator_1: Rotation
                {
                    source         = "speed";
					type="rotation";
                    selection      = "ins_asi_1";
                    axis           = "ins_asi_1_axis";
                    minValue       = 0.000000;
                    maxValue       = 110.000000;
                    angle0         = "rad 130";
                    angle1         = "rad -200";
                };
                class Altimiter_1: Rotation
                {
                    source         = "altBaro";
					type="rotation";
                    selection      = "ins_alt_1";
                    axis           = "ins_alt_1_axis";
                    sourceAddress  = "loop";
                    maxValue       = 100;
					angle0="";
                    angle1         = "rad -360";
                };
                class Altimiter_2: Rotation
                {
                    source         = "altBaro";
					type="rotation";
                    selection      = "ins_alt_2";
                    axis           = "ins_alt_2_axis";
                    sourceAddress  = "loop";
                    maxValue       = 1000;
					angle0="";
                    angle1         = "rad -360";
                };
               class Compass_1: Rotation
                {
                    source         = "direction";
					type="rotation";
                    selection      = "ins_compass_1";
                    axis           = "ins_compass_1_axis";
                    minvalue       = "rad -180";
                    maxvalue       = "rad 180";
                    angle0         = "rad 70";
                    angle1         = "rad -290";
                };
	            class display_on
                {
				    type="hide";
				    source="rpm";
				    selection="display_off";
				    minValue=-0.8;
				    maxValue=0.2;
				    hidevalue=0.9;
				    sourceAddress="clamp";
	            };
	class dg_rpm
	{
				type="translation";
				source="rpm";
				selection="dg_rpm";
				axis="dg_rpm_axis";
				memory=1;
				minValue=0;
				maxValue=1;
				offset0=1;
				offset1=0;
				sourceAddress="clamp";
	};
	class dg_vertspeed
	{
				type="translation";
				source="vertSpeed";
				selection="dg_vertspeed";
				axis="dg_vertspeed_axis";
				memory=1;
				minValue=-15;
				maxValue=15;
				offset0=-0.5;
				offset1=0.5;
	};
               class dg_compas: Compass_1
               {
                    selection      = "dg_compas";
					type="rotation";
                    axis           = "dg_compas_axis";
                    angle0         = "rad 0";
                    angle1         = "rad 36";
	      sourceaddress         = "loop";
               };
               class dg_pitch: ArtificialHorizon_1_Pitch
               {
                    selection      = "dg_pitch";
                    axis           = "dg_pitch_axis";
                    minValue       = "rad -90";
                    maxValue       = "rad 90";
                    angle0         = "rad -34";
                    angle1         = "rad 34";
               };
               class dg_bank: ArtificialHorizon_1_Roll
               {
                    type           = "rotation";
                    selection      = "dg_bank";
                    axis           = "dg_bank_axis";
                    minValue       = "rad -360";
                    maxValue       = "rad 360";
                    angle0         = "rad 360";
                    angle1         = "rad -360";
               };




               class Dampers: Rotation
               {
                    source         = "altRadar";
					type="rotation";
                    selection      = "";
                    axis           = "";
					//minvalue = 0;
                    maxValue       = 0.20;
                    angle0         = 0.1;
                    angle1         = 0.00;
               };
               class DampersRear: Dampers
               {
                    selection      = "damper_rear";
					type="rotation";
                    axis           = "damper_rear_axis";
					//maxValue       = 0.25;
               };
               class DampersLeft: Dampers
               {
                    selection      = "damper_left";
					type="rotation";
                    axis           = "damper_left_axis";
               };
               class DampersRight: Dampers
               {
                    selection      = "damper_right";
					type="rotation";
                    axis           = "damper_right_axis";
                    angle0         = -0.1;
                    angle1         = 0.00;
               };

               class Elevator: Rotation
               {
                    source         = "speed";
					type="rotation";
                    selection      = "elevator";
                    axis           = "elevator_axis";
                    minValue       = 25.0;
                    maxValue       = 30.0;
                    angle0         = 0.5;
                    angle1         = 0.0;
               };
			};
	    
     };
	class Ah64D : AH_BAF {};
	class AGM114Hellfire_proxy: Default
	{
		skeletonName="";
		sectionsInherit = "";
		sections[] = {};

		htMin = 60;		// Minimum half-cooling time (in seconds)
		htMax = 1800;	// Maximum half-cooling time (in seconds)
		afMax = 200;	// Maximum temperature in case the model is alive (in celsius)
		mfMax = 100;	// Maximum temperature when the model is moving (in celsius)
		mFact = 0;		// Metabolism factor - number from interval <0, 1> (0 - metabolism has no influence, 1 - metabolism has full influence (no other temperature source will be considered)).
		tBody = 0;
	};
	class AGM114Hellfire: AGM114Hellfire_proxy {};	 
};